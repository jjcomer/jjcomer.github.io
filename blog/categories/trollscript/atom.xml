<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: trollscript | The Blog of Josh Comer]]></title>
  <link href="http://jjcomer.github.io/blog/categories/trollscript/atom.xml" rel="self"/>
  <link href="http://jjcomer.github.io/"/>
  <updated>2013-05-25T07:35:38-03:00</updated>
  <id>http://jjcomer.github.io/</id>
  <author>
    <name><![CDATA[Josh Comer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Trollscript]]></title>
    <link href="http://jjcomer.github.io/blog/2011/09/11/trollscript/"/>
    <updated>2011-09-11T16:32:00-03:00</updated>
    <id>http://jjcomer.github.io/blog/2011/09/11/trollscript</id>
    <content type="html"><![CDATA[<p>Well, I haven&rsquo;t been doing much in the way of coding over the last couple weeks, but today that changed. I came across <a href="https://github.com/tombell/trollscript">Tom Bell&rsquo;s ruby implementation</a> of a trollscript interpreter, and figured that the clojure community needs an interpreter too. A couple hours later and I had whipped up my first version of a <a href="https://github.com/jjcomer/trollscript">trollscript interpreter</a>.</p>

<!--more-->


<h2>So what is trollscript you might ask&hellip;</h2>

<p>Trollscript is a dialect of brainfuck (and by dialect I mean the symbols have just been swapped). The following is the Hello World example from Tom Bell&rsquo;s site:</p>

<pre><code>Trooloolooloolooloolooloolooloolollooooolooloolooloolooloolooooolooloolooloolooloolooloolooloooooloolooloooooloooloolooloololllllooooloololoooooololooolooloolooloolooloololoolooolooloololooooooloololooooloololooloolooloolooloolooloolooloolooloolooloololooooolooolooloololooollollollollollolllooollollollollollollollollloooooololooooolooll.
</code></pre>

<p>Which, as expected, produces:</p>

<pre><code>Hello World
</code></pre>

<p>The language has a 30,000 (this is arbitrary) byte data array which is read and written to in a tape like manner. To make my space usage a little more efficient the data array is implemented as a hash, which will only grow as it is accessed.</p>

<h2>The Commands</h2>

<h3>Delimeters</h3>

<ul>
<li><strong>Tro</strong> all trollscripts begin with this</li>
<li><strong>ll.</strong> all trollscripts end with this</li>
</ul>


<h3>Pointer movement</h3>

<ul>
<li><strong>ooo</strong> increments the data pointer</li>
<li><strong>ool</strong> decrements the data pointer</li>
<li><strong>olo</strong> increases the byte at the data pointer by one</li>
<li><strong>oll</strong> decreases the byte at the data pointer by one</li>
</ul>


<h3>Input/Output</h3>

<ul>
<li><strong>loo</strong> output the char (byte) at the data pointer</li>
<li><strong>lol</strong> input one byte and write the value to the byte under the data pointer</li>
</ul>


<h3>Control mechanisms</h3>

<p>I implemented these as memoized functions, so they should be pretty quick.</p>

<ul>
<li><strong>llo</strong> if the byte under the data pointer is zero, increment the program counter to point to the instruction <em>after</em> the matching <strong>lll</strong></li>
<li><strong>lll</strong> if the byte under the data pointer is non-zero, decrement the program counter to point to the instruction <em>after</em> the matching <strong>llo</strong></li>
</ul>


<h2>The Code</h2>

<p><div><script src='https://gist.github.com/1210073.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>
]]></content>
  </entry>
  
</feed>
