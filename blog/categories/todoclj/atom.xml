<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: TodoClj | The Blog of Josh Comer]]></title>
  <link href="http://jjcomer.github.io/blog/categories/todoclj/atom.xml" rel="self"/>
  <link href="http://jjcomer.github.io/"/>
  <updated>2013-05-25T07:35:38-03:00</updated>
  <id>http://jjcomer.github.io/</id>
  <author>
    <name><![CDATA[Josh Comer]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[TodoClj 1.0.0 Is Done]]></title>
    <link href="http://jjcomer.github.io/blog/2011/08/09/todoclj-1-0-0-is-done/"/>
    <updated>2011-08-09T21:14:00-03:00</updated>
    <id>http://jjcomer.github.io/blog/2011/08/09/todoclj-1-0-0-is-done</id>
    <content type="html"><![CDATA[<p>I have finished the first version of <a href="https://github.com/jjcomer/TodoClj">TodoClj</a>. Please check it out. Note that I have put almost no error checking into the parser, therefore things will crash if not perfect. Windows users should compile from source (to get version 1.0.1) since the ANSI codes used to colour the output do not render and the new version prevents colour from being rendered when run on Windows. If you have lein installed compiling is as easy as:</p>

<pre><code>lein uberjar
</code></pre>

<!--more-->


<h2>Usage</h2>

<p>Usage pretty much emulates Todo.txt. The following commands assume you have created a batch/shell script called <em>Todo</em>.</p>

<h3>Batch File</h3>

<pre><code>@echo off
java -jar TodoClj.jar %*
</code></pre>

<h3>Add task</h3>

<pre><code>$ Todo add "My new task"
TODO: 'My new task' added on line 1
</code></pre>

<p>You can also define projects (+) and contexts (@) within a task by prefixing words with the corresponding symbol</p>

<h3>List task</h3>

<pre><code>$ Todo ls
002:    Another task
001:    My new task
</code></pre>

<p>You can also filter by adding the projects and/or contexts you wish to filter the list on</p>

<pre><code>$ Todo ls +myProject @someContext +anotherContext
</code></pre>

<h3>Complete a task</h3>

<pre><code>$ Todo do 1
$ Todo ls
002:    Another task
001:    X   My new task
</code></pre>

<h3>Add priority</h3>

<pre><code>$ Todo pri 2 A
$ Todo ls
002:    (A) Another task
001:    X    My new task
</code></pre>

<p>Priorities can range from A-Z</p>

<h3>Filter on priority</h3>

<pre><code>$ Todo lsp A
002:    (A) Another task
</code></pre>

<h3>Remove priority</h3>

<pre><code>$ Todo depri 2
$ Todo ls
002:    Another task
001:    X   My new task
</code></pre>

<h3>Remove completed tasks</h3>

<pre><code>$ Todo clean
$ Todo ls
001:    Another task
</code></pre>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Who Needs an Object When You Have a Map?]]></title>
    <link href="http://jjcomer.github.io/blog/2011/08/04/who-needs-an-object-when-you-have-a-map/"/>
    <updated>2011-08-04T20:49:00-03:00</updated>
    <id>http://jjcomer.github.io/blog/2011/08/04/who-needs-an-object-when-you-have-a-map</id>
    <content type="html"><![CDATA[<p>I had been thinking about the parsing code I initially written for <a href="http://jjcomer.github.com/TodoClj">TodoClj</a> I remembered that I had initially set out to mimics <a href="https://github.com/ginatrapani/todo.txt-cli">Todo.txt</a>, so I have reoriented and now I am parsing the same format accepted by Todo.txt.</p>

<p>File /home/josh/code/octopress/source/downloads/code/Clojure/coreV2.clj could not be found</p>

<p>I feel that I am getting more and more comfortable with using clojure. I have stopped using Eclipse and instead use Sublime Text 2 and the REPL provided by lein for my project.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Now With More State]]></title>
    <link href="http://jjcomer.github.io/blog/2011/07/30/now-with-more-state/"/>
    <updated>2011-07-30T21:44:00-03:00</updated>
    <id>http://jjcomer.github.io/blog/2011/07/30/now-with-more-state</id>
    <content type="html"><![CDATA[<p>So I managed to sit down tonight and add state passing to the state machine. It now appears to be time to add support for doing <strong>actual</strong> things.</p>

<p>As I was writing the <em>init</em> function I was questioning what options will truly be required. I may want to cache the file contents in memory, which can be kept in the state hash. We shall see!</p>

<p><div><script src='https://gist.github.com/1116199.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p>Hopefully tomorrow I will have some time to sit down and add in at least the create.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[There Has to Be State]]></title>
    <link href="http://jjcomer.github.io/blog/2011/07/30/there-has-to-be-state/"/>
    <updated>2011-07-30T15:33:00-03:00</updated>
    <id>http://jjcomer.github.io/blog/2011/07/30/there-has-to-be-state</id>
    <content type="html"><![CDATA[<p>It occurred to me after I posted the prototype state machine that I had missed an important piece, State. I know that state is a naughty word when discussing functional languages, but an application must have a state. The bad taste surrounding state in functional languages is in reference to mutability of variables, as opposed to the application remembering which file it is acting upon.</p>

<p>It should be completely possible to enclose the current state of the application into a parameter for the state machine. Each action method will accept and return the state of the application stored in a hash. I will post a prototype of said functionality later tonight, assuming I don&rsquo;t get too distracted or see a shiny object.</p>

<p>I have also created the first draft of the state machine (in diagram form).
<img src="/images/TodoStateMachine.png"></p>

<p>On a side note, it is hard to find a good free diagramming tool. After trying out a couple I ended up settling on <a href="http://docs.google.com">Google Docs</a> and the Draw tool. I had pretty much endless storage, could make drawings as large as I wanted, and could export into all sorts of formats.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Tail Recursive State Machines]]></title>
    <link href="http://jjcomer.github.io/blog/2011/07/28/tail-recursive-state-machines/"/>
    <updated>2011-07-28T20:21:00-03:00</updated>
    <id>http://jjcomer.github.io/blog/2011/07/28/tail-recursive-state-machines</id>
    <content type="html"><![CDATA[<p>I was reading an article the other day which stated that a great method to use when learning a new language is to imitate software that you already use. In my attempt to fully grok Clojure I have decided to start small and imitate <a href="http://todotxt.com/">todo.txt</a></p>

<p>The first hurdle I always face when starting a new language is determining the basic architecture pattern to follow when writing an application. For some reason this is a topic which is not widely discussed or written about. Some languages, such as Objectuve-C,have a prescribed architecture which you are to follow, thereby making my difficulties moot. But clojure and the majority of other languages do not have this benefit. We are left to discover these patterns by ourselves.</p>

<p>Perhaps the intension is that one is supposed to trail and error and determine what works the best for themselves. Maybe the idea is that each application is different enough that there cannot be a default application pattern for a language. Web development seems to alleviate this problem by not dictating the pattern to the language, but instead to the framework with which one constructs their site.</p>

<p>So, in light of this I am attempting to formulate an application pattern which I think will work with my thought patterns. I am intrigued by the concept of creating applications around the state machine model. The following code is a quick prototype I whipped up.</p>

<p><div><script src='https://gist.github.com/1115436.js'></script>
<noscript><pre><code></code></pre></noscript></div>
</p>

<p> The program loop represents the state machine which is the program. The looping is done with the trampoline command, which allows for tail-recursion optimization. This should be an easily extensible model. If states need to pass parameters, the parameters should be returned by the action function (action functions such as displayMenu) and then enclosed in the returning function. The only thing I am not overly happy with is the potential size of the program loop, but this should be something I can improve upon.</p>
]]></content>
  </entry>
  
</feed>
